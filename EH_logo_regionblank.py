import pickle
import sys
import math
from PIL import Image, ImageDraw # used when debugging to draw detected points

"""Load list of English Heritage logo positions per plaque, figure out a
bounding box around the cluster of detected points and provide a
bounding box which we can use to blank the logo from the image"""

# this depends on
# eh_logo_points_dict.pickle
# generated by
# EH_find_logo.py

EH_LOGO_POINTS_FILE = "eh_logo_points_dict.pickle"

plaque_logo_positions = pickle.load(file(EH_LOGO_POINTS_FILE))

# circles_overlap is testing code, ignore for now
def circles_overlap(p1, p2, r):
    """Test if circles defined by centres at p1 and p2
       overlap, assume r as radius for both circles"""
    d1 = (p1[0] - p2[0])
    d2 = (p1[1] - p2[1])
    dist = math.sqrt((d1*d1) + (d2*d2))
    return dist < r

def get_bounding_box_for_EH_logo(filename, debug = False):
    """return a bounding box (x1,y1,x2,y2) which marks a region
       containing the English Heritage logo which can be blanked"""
    (imgsize, points) = plaque_logo_positions[filename]
    # filename is the plaque's filename
    # imgsize e.g. (640,480), (1024,768)
    # points is a list of points in the image that might represent English
    # Heritage logo
    if debug:
        print filename, imgsize

    # get a unique set of detected points
    points_set = set(points) # removes many duplicates
    points = [p for p in points_set]

    # radius as a test was 70, this is a hand tuned value
    radius = imgsize[0] / 20
    if debug:
        print "Radius:", radius
    overlap_count = {}
    for p1 in points:
        for p2 in points:
            if circles_overlap(p1, p2, radius):
                if p1 != p2:
                    c = overlap_count.get(p1, 0)
                    overlap_count[p1] = c + 1

    if debug:
        print "Nbr overlaps", overlap_count

    if debug:
        # draw the plaque, useful when debugging
        img = Image.open(filename)
        print filename, " - ", img.size
        imgd = ImageDraw.Draw(img)

    x0 = imgsize[0]        
    y0 = imgsize[1]
    x1 = 0
    y1 = 0
    region_defined = False
    for point, count in overlap_count.items():
        if count > 3:
            x = point[0]
            y = point[1]
            if debug:
                # print a black circle for each point
                # use this to debug the creation of the bounding box
                c1 = (x-radius,y-radius,x+radius,y+radius)
                imgd.ellipse(c1) # draw unfilled circle

            bounding_region_x = 0
            bounding_region_y = 0
            x0 = min(x-bounding_region_x, x0)
            x1 = max(x+bounding_region_x, x1)
            y0 = min(y0-bounding_region_y, y)
            y1 = max(y1+bounding_region_y, y)
            region_defined = True

    if region_defined:
        # make the bounding box wider as sometimes the SURF detector finds
        # interior points, not exterior points, in which case it draws the bounding
        # box on the *inside* of the EH logo
        bounding_box_width = x1 - x0
        x0 = x0 - (bounding_box_width/2) # make it 50% wider to left
        x1 = x1 + (bounding_box_width/2) # and 50% wider to right
    
        # make the depth of the box reach to the bottom of the image, there should
        # be no text below the EH logo
        y1 = imgsize[1]
    
    if debug:
        print x0, y0, x1, y1
        imgd.rectangle([x0, y0, x1, y1])
        img.show()

    if region_defined:
        return (x0, y0, x1, y1)
    else:
        return None


if __name__ == "__main__":
    if len(sys.argv) > 1:
        filename = sys.argv[1]
        print "Working with", filename
        print get_bounding_box_for_EH_logo(filename, True)
    else:
        # iterate over all the plaques using this, it'll
        # draw each plaque with all detected logo positions (circles)
        # and the derived bounding box (rectangle) per plaque
        for filename, (imgsize, points) in plaque_logo_positions.items():
            print get_bounding_box_for_EH_logo(filename, True)
    
